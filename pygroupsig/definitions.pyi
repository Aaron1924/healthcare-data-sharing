from pygroupsig.interfaces import KeyInterface, SchemeInterface, SignatureInterface
# from pygroupsig.pairings.mcl import Fr, G2


class Scheme(SchemeInterface):
    _SCHEMES: dict[str, Scheme]
    scheme: Scheme
    def __init__(self, scheme: str) -> None: ...
    def _get_scheme(self, scheme: str) -> SchemeInterface: ...
    def setup(self) -> None: ...
    def join_mem(self, phase: int, message: dict[str, str] | None = None) -> dict[str, str]: ...
    def join_mgr(self, phase: int, message: dict[str, str] | None = None) -> dict[str, str]: ...
    def sign(self, message: str | bytes) -> dict[str, str]: ...
    def verify(self, message: str | bytes, signature: str) -> dict[str, str]: ...

class Key(KeyInterface):
    _KEYS: dict[str, dict[str, Key]]
    key: Key
    def __init__(self, scheme: str, ktype: str) -> None: ...
    def _get_key(self, scheme: str, ktype: str) -> KeyInterface: ...

class Signature(SignatureInterface):
    _SIGNATURES: dict[str, dict[str, Signature]]
    signature: Signature
    def __init__(self, scheme: str) -> None: ...
    def _get_signature(self, scheme: str) -> SignatureInterface: ...

# class SPKDLog:
#     c: Fr
#     s: Fr

# class SPKRep:
#     c: Fr
#     s: list[Fr]

# class SPKPairingHomomorphismG2:
#     c: Fr
#     s: G2

class OpenMixin: ...
class OVerifyMixin: ...
class RevealTraceClaimCVerifyProveEqPEqVerifyMixin: ...
class BlindConvertUnblindMixin: ...
class IdentifyLinkLVerifyMixin: ...
class SeqlinkSVerifyMixin: ...
