from typing_extensions import Self
from typing import TypeVar, NoReturn
import ctypes

T = TypeVar("T")
U = TypeVar("U")

class Base(ctypes.Structure):
    BUF_SZ: int
    SIG: str
    def is_zero(self)-> bool: ...
    def __eq__(self, y: object) -> bool: ...
    def is_equal(self, y: Self) -> bool: ...
    def __neg__(self) -> Self: ...
    def neg(self) -> Self: ...
    def __add__(self, y: Self) -> Self: ...
    def add(self, y: Self) -> Self: ...
    def __sub__(self, y: Self) -> Self: ...
    def sub(self, y: Self) -> Self: ...
    def __mul__(self, y: Self) -> Self: ...
    def mul(self, y: Self) -> Self: ...
    def to_bytes(self) -> bytes: ...
    def set_from_bytes(self, buf: bytes) -> None: ...
    @classmethod
    def from_bytes(cls: T, buf: bytes) -> T: ...
    def to_hex(self) -> str: ...
    def to_b64(self) -> str: ...
    def set_from_b64(self, s: str) -> None: ...
    @classmethod
    def from_b64(cls: T, s: str) -> T: ...
    def set_from_object(self, y: Self) -> None: ...
    @classmethod
    def from_object(cls: T, y: T) -> T: ...
    @classmethod
    def byte_size(cls: T) -> int: ...
    def to_file(self, file: str) -> None: ...
    def set_from_file(self, file: str) -> None: ...
    @classmethod
    def from_file(cls: T, file: str) -> T: ...

class StrMixin:
    def set_str(self, s: str | bytes, mode: int = 10) -> None | NoReturn: ...
    def get_str(self, mode: int = 10) -> str | NoReturn: ...

class HashEndianPrngCmpMixin:
    def set_hash(self, s: str | bytes) -> None | NoReturn: ...
    def set_random(self) -> None | NoReturn: ...
    def cmp(self, y: Self) -> int: ...
    def __gt__(self, y: Self) -> bool: ...
    def __ge__(self, y: Self) -> bool: ...
    def __lt__(self, y: Self) -> bool: ...
    def __le__(self, y: Self) -> bool: ...

class OneInvDivMixin:
    def is_one(self) -> bool: ...
    def __invert__(self) -> Self: ...
    def inv(self) -> Self: ...
    def __truediv__(self, y: Self) -> Self: ...
    def div(self, y: Self) -> Self: ...

class MulFrMixin:
    def __mul__(self, y: Fr) -> Self: ...
    def mul(self, y: Fr) -> Self: ...

class PowMixin:
    def __pow__(self, y: Self) -> Self: ...
    def pow(self, y: Self) -> Self: ...

class MulVecMixin:
    def muln(self, x: T, y: Fr) -> T: ...

class HashAndMapMixin:
    def set_hash(self, s: str | bytes) -> None: ...

class IntMixin:
    def set_int(self, i: int) -> None | NoReturn: ...

class GenPrngMixin:
    def set_random(self) -> None: ...

class Fp(StrMixin, HashEndianPrngCmpMixin, OneInvDivMixin, PowMixin, IntMixin, Base): ...
class Fr(StrMixin, HashEndianPrngCmpMixin, OneInvDivMixin, PowMixin, IntMixin, Base): ...

class Fp2(OneInvDivMixin, Base):
    D: int
    @classmethod
    def byte_size(cls: T) -> int: ...

class G1(StrMixin, MulFrMixin, MulVecMixin, HashAndMapMixin, GenPrngMixin, Base): ... # type: ignore
class G2(StrMixin, MulFrMixin, MulVecMixin, HashAndMapMixin, GenPrngMixin, Base): ... # type: ignore

class GT(StrMixin, OneInvDivMixin, PowMixin, MulVecMixin, IntMixin, Base):
    D: int
    @classmethod
    def byte_size(cls: T) -> int: ...
    def pown(self, x: T, y: U) -> T: ...
    @classmethod
    def pairing(cls: T, e1: G1, e2: G1) -> T: ...
