from ctypes import Array, Structure, _CData
from typing import Type, TypeVar

from typing_extensions import Self

T = TypeVar("T")
S = TypeVar("S", bound=_CData)

class Base(Structure):
    BUF_SZ: int
    SIG: str
    def is_zero(self) -> bool: ...
    def __eq__(self, y: object) -> bool: ...
    def is_equal(self, y: Self) -> bool: ...
    def __neg__(self) -> Self: ...
    def neg(self) -> Self: ...
    def __add__(self, y: Self) -> Self: ...
    def add(self, y: Self) -> Self: ...
    def __sub__(self, y: Self) -> Self: ...
    def sub(self, y: Self) -> Self: ...
    def __mul__(self, y: Self) -> Self: ...
    def mul(self, y: Self) -> Self: ...
    def to_bytes(self) -> bytes: ...
    def set_bytes(self, buf: bytes) -> None: ...
    @classmethod
    def from_bytes(cls: Type[T], buf: bytes) -> T: ...
    def to_hex(self) -> str: ...
    def to_b64(self) -> str: ...
    def set_b64(self, s: str | bytes) -> None: ...
    @classmethod
    def from_b64(cls: Type[T], s: str | bytes) -> T: ...
    def set_object(self, y: Self) -> None: ...
    @classmethod
    def from_object(cls: Type[T], y: T) -> T: ...
    @classmethod
    def byte_size(cls: Type[T]) -> int: ...
    def to_file(self, file: str) -> None: ...
    def set_file(self, file: str) -> None: ...
    @classmethod
    def from_file(cls: Type[T], file: str) -> T: ...

class StrMixin:
    def set_str(self, s: str | bytes, mode: int = 10) -> None: ...
    @classmethod
    def from_str(cls: Type[T], s: str | bytes, mode: int = 10) -> T: ...
    def get_str(self, mode: int = 10) -> str: ...

class HashEndianRandomCmpMixin:
    def set_hash(self, s: str | bytes) -> None: ...
    @classmethod
    def from_hash(cls: Type[T], s: str | bytes) -> T: ...
    def set_random(self) -> None: ...
    @classmethod
    def from_random(cls: Type[T]) -> T: ...
    def cmp(self, y: Self) -> int: ...
    def __gt__(self, y: Self) -> bool: ...
    def __ge__(self, y: Self) -> bool: ...
    def __lt__(self, y: Self) -> bool: ...
    def __le__(self, y: Self) -> bool: ...

class OneInvDivMixin:
    def is_one(self) -> bool: ...
    def __invert__(self) -> Self: ...
    def inv(self) -> Self: ...
    def __truediv__(self, y: Self) -> Self: ...
    def div(self, y: Self) -> Self: ...

class MulFrMixin:
    def __mul__(self, y: Fr) -> Self: ...
    def mul(self, y: Fr) -> Self: ...

class MulVecMixin(Structure):
    @classmethod
    def muln(cls: Type[S], x: Array[S], y: Array[Fr]) -> S: ...

class PowMixin:
    def __pow__(self, y: Self) -> Self: ...
    def pow(self, y: Self) -> Self: ...

class PowFrMixin:
    def __pow__(self, y: Fr) -> Self: ...
    def pow(self, y: Fr) -> Self: ...

class HashAndMapMixin:
    def set_hash(self, s: str | bytes) -> None: ...
    @classmethod
    def from_hash(cls: Type[T], s: str | bytes) -> T: ...

class IntMixin:
    def set_int(self, i: int) -> None: ...
    @classmethod
    def from_int(cls: Type[T], i: int) -> T: ...

class GenPrngMixin:
    def set_random(self) -> None: ...
    @classmethod
    def from_random(cls: Type[T]) -> T: ...

class GeneratorMixin:
    def set_generator(self) -> None: ...
    @classmethod
    def from_generator(cls: Type[T]) -> T: ...

class Fp(
    StrMixin, HashEndianRandomCmpMixin, OneInvDivMixin, PowMixin, IntMixin, Base
): ...
class Fr(
    StrMixin, HashEndianRandomCmpMixin, OneInvDivMixin, PowMixin, IntMixin, Base
): ...

class Fp2(OneInvDivMixin, Base):
    D: int
    @classmethod
    def byte_size(cls: Type[T]) -> int: ...

class G1(  # type: ignore
    StrMixin, MulFrMixin, MulVecMixin, HashAndMapMixin, GeneratorMixin, Base
): ...
class G2(  # type: ignore
    StrMixin, MulFrMixin, MulVecMixin, HashAndMapMixin, GeneratorMixin, Base
): ...

class GT(StrMixin, OneInvDivMixin, MulVecMixin, PowFrMixin, IntMixin, Base):
    D: int
    @classmethod
    def byte_size(cls: Type[T]) -> int: ...
    @classmethod
    def pown(cls: Type[S], x: Array[S], y: Array[Fr]) -> S: ...
    @classmethod
    def pairing(cls: Type[T], e1: Type[G1], e2: Type[G2]) -> T: ...
