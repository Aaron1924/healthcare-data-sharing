import ctypes
import os

# src/bn_c384_256.cpp
MCLBN_FP_UNIT_SIZE: int = 6
MCLBN_FR_UNIT_SIZE: int = 4

# include/lib/curve_type.h
MCL_BLS12_381: int = 5

# include/lib/bn.h
MCLBN_COMPILED_TIME_VAR: int = MCLBN_FR_UNIT_SIZE * 10 + MCLBN_FP_UNIT_SIZE

# src/shim/pbc_ext.h (libgroupsig)
BLS12_381_P: str = "1 3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507 1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569"
BLS12_381_Q: str = "1 352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160 3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758 1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905 927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582"

LIB_PATH: str = os.environ.get("MCL_LIB_PATH", "")
MCL_LIB: str = "libmcl.so"
MCL384_LIB: str = "libmclbn384_256.so"
lib: ctypes.CDLL | None = None


def load_library() -> None:
    global lib
    if not LIB_PATH:
        raise RuntimeError("Environment variable MCL_LIB_PATH missing.")
    ctypes.CDLL(f"{LIB_PATH}/{MCL_LIB}")
    lib = ctypes.CDLL(f"{LIB_PATH}/{MCL384_LIB}")
    if lib.mclBn_init(MCL_BLS12_381, MCLBN_COMPILED_TIME_VAR):
        raise RuntimeError("mcl library could not be initialized")
